#+title: Como nunca mais perder aquele arquivo/projeto?
#+author: Matheus de Souza Pessanha
#+email: 00119110328@pq.uenf.br

* Git
~git~ √© uma ferramenta de DVCS (Distributed Version Control System), ou "sistema de controle de vers√µes distribuido",
utilizado para versionar (criar vers√µes) diferentes de um arquivo/projeto.

- Criado por Linus Torvalds
- N√£o √© o √∫nico VCS, existem outros como: Subversion e Mercurial
- Almeja oferecer a maior flexibilidade, seguran√ßa e desempenho
- Relativamente dif√≠cil de aprender, pela quantidade de novos conceitos e comandos

** Diferen√ßa entre git e Github
- O ~git~ √© de fato o software de VCS
- Github √© uma plataforma de hospedagem de c√≥digo fonte, que utiliza o ~git~
  - Outros exemplos, s√£o:
    1. Gitlab
    2. BitBucket

** Instalando o git
- Existe uma vers√£o oficial para windows: https://git-scm.com/download/win
  - Instala em conjunto o "git bash", um emulador de terminal bem limitado com o bash
- Em distros Linux baseadas no Debian, rode: =sudo apt install git=
  - Geralmente o ~git~ j√° vem instalado por padr√£o nas distros

** Conceitos iniciais
*** Reposit√≥rio
Bem, nas outras aulas houve uma breve expli√ß√£o do que s√£o reposit√≥rios! O ~git~ usa o mesmo conceito.

**** Reposit√≥rio local
- Lugar onde fica os arquivos na sua m√°quina, de forma "local"
**** Reposit√≥rio remoto
- Lugar para onde enviamos as mudan√ßas locais e armazenamos todas as mudan√ßas
- Geralmente usamos uma plataforma, como Github

*** Working tree
- "√Årvore de trabalho", ou seja, local onde ficam as mudan√ßas n√£o commitadas
*** Commit
- Cria um ponto ("save") no seu reposit√≥rio
- Respons√°vel por criar a "linha do tempo" do projeto

*** Branch
- Imagine seu projeto como uma √°rvore
- Cria um novo "ramo" do seu projeto!
- Todo projeto possui uma branch raiz padr√£o ~master~ ou ~main~

*** Staging
- Passo anterior ao ~commit~
- Armazena as mudan√ßas de forma tempor√°ria e facilmente revers√≠vel

*** Clonar
- √â poss√≠vel clonar reposit√≥rios remotos, ou seja, trazer o reposit√≥rio remoto para sua m√°quina

*** Push
- Faz o upload dos commits locais para um reposit√≥rio remoto

*** Pull
- Faz o download das mudan√ßas de um reposit√≥rio remoto para um local

*** HEAD
- Significa uma refer√™ncia para o √∫ltimo commit e branch atual
*** Merge
- "Mesclar"
- Junta commits de uma branch em outra
- N√£o altera o hist√≥rico de commits
- Cria um novo commit para a confirma√ß√£o da mesclagem
*** Rebase
- Reescreve todo o hist√≥rico de commits
- N√£o cria novos commits, apenas copia eles de uma branch e os coloca em outra,
  parecendo que a segunda branch nunca foi criada
- Possui uma vers√£o interativa na qual √© poss√≠vel trocar as mensagens de commits e realizar outras modifica√ß√µes
  antes de juntar os commits
** Comandos
Antes de inciar os comandos, devemos configurar o git localmente, nos identificando:
#+begin_src bash

git config --global user.email "seu@email.com"
git config --global user.name "Seu nome"

#+end_src


*** git init
- Cria um reposit local no diret√≥rio atual
*** git clone <url-repo-remoto> [destino]
- Clona um reposit√≥rio remoto para sua m√°quina
  - Existem duas formas de clonar um reposit√≥rio:
    1. SSH
    2. HTTPS
*** git add <arquivos>
- Adiciona um ou mais arquivos para o staging
- =git add .= -> adiciona todo o diret√≥rio atual para staging
*** git status
- Mostra o estado atual do seu reposit√≥rio local
*** git log
- Mostra o hist√≥rico dos commits
- =git log --graph= -> cria um "gr√°fico" com o hist√≥rico de commits
*** git commit -m <mensagem>
- Cria um commit com os arquivos em staging com uma mensagem
*** git push <repo-remoto> <branch-fonte>
- Faz o upload dos commits da "branch-fonte" para um reposit√≥rio remoto
  - Geralmente chamamos o reposit√≥rio remoto de "origin"
- =git push <repo-remoto> --delete <branch>= -> deleta uma branch remota
- =git push <repo-remoto> :<branch-antiga> <nova-branch>= -> renomeia uma branch remota
*** git remote
- =git remote -v= -> mostra todos os reposit√≥rios remotos
- =git remote add <nome> <url>= -> adiciona um novo remosit√≥rio remoto localmente
- =git remote remove <nome>= -> remove um reposit√≥rio remoto localmente
*** git fetch <repo-remoto>
- Sincroniza o reposit√≥rio local e reposit√≥rio remoto
*** git checkout
- =git checkout -b <nome-branch>= -> cria uma nova branch com o nome especificado e muda o ~HEAD~ para ela
- =git checkout <branch>= -> muda a ~HEAD~ para uma branch existente
*** git branch
- =git branch=  -> mostra todas as branches e em qual voc√™ est√° atualmente
- =git branch <nome>= -> cria uma branch com o nome especificado
- =git branch -m <branch-antiga> <branch-nova>= -> renomeia uma branch local
- =git branch -d <branch>= -> deleta uma branch local
- =git branch -D <branch>= -> deleta uma branch local, descartando todas as mudan√ßas n√£o commitadas
*** git pull <repo-remoto> <branch-destino>
- Faz o download de um reposit√≥rio remoto para a "branch-destino".
  Ir√° automaticamente tentar mesclar as duas branches fazendo um "merge"
- =git pull --rebase <repo-remoto> <branh-destino>= -> mesmo que o =git pull=, por√©m realiza um ~rebase~
*** git diff
- Mostra todas as mudan√ßas realizadas desde o √∫ltimo commit
- =git diff <arquivo>= -> mostra as mudan√ßas de um arquivo desde o √∫ltimo commit
*** git stash
- Salva temporariamente as mudan√ßas n√£o commitadas para serem recuperadas depois, mesmo em outras branches
- =git stash pop= -> recupera as √∫ltimas mudan√ßas salvas no stash, na branch atual
*** git merge <branch>
- Mescla a branch especificada com a branch atual
*** git rebase <branch>
- Junta os commits da branch especificada com a atual
*** git cherry-pick <commit-hash>
- Possibilita adicionar um commit de uma branch em outra (nem sempre √© a melhor pr√°tica)
*** git clean
- Remove arquivos n√£o supervisionados pelo git
- =git clean -f .= -> limpa os arquivos da working tree do diret√≥rio atual
- =git clean -fd .= -> limpa os diret√≥rios da working tree
*** git reflog
- Um "di√°rio" que guarda as mudan√ßas na ~HEAD~

** Desfazer erros comuns
*** Descartando mudan√ßas locais e restaurando arquivos
**** git restore <arquivo>
- Descarta todas as mudan√ßas n√£o commitadas de um arquivo at√© seu √∫ltimo commit
- Se utilizado num arquivo deletado, restaura o arquivo
- =git restore -p <arquivo>= -> oferece a possibilidade de descartar mudan√ßas em partes espec√≠ficas
- =git restore .= -> descarta todas as mudan√ßas do diret√≥rio at√© o √∫ltimo commit
- =git restore --source <commit-hash>= -> dado um commit hash e um arquivo, isso ir√° restaurar o arquivo para aquele ponto em
  espec√≠fico
*** Reverter ou editar um commit
**** =git commit --amend -m <mensagem>=
- Edita a mensagem de commit do √∫ltimo commit
- Caso tenha esquecido de adicionar uma mudan√ßa, adicione ela ao staging e execute o comando
- Esse comando reescreve o hist√≥rico de commits (substitui o commit afetado). N√ÉO UTILIZE CASO J√Å TENHA DADO PUSH NO COMMIT
**** =git revert <commit-hash>=
- Cria um novo commit o qual possui as mudan√ßas opostas ao commit especificado!
- Para conseguir o commit hash, use =git log=
- Forma segura de "refazer um commit antigo"
**** =git reset <commit-hash>=
- Retorna para o commit especificado, descartando os commit seguintes
- =git reset --hard <commit-hash>= -> todas as mudan√ßas locais ser√£o descartadas
- =git reset --soft <commit-hash>= -> persiste as mudan√ßas realizadas nos commits

* Github
Github √© uma plataforma de hospedagem de c√≥digo fonte, ou seja, onde criamos reposit√≥rios remotos.

** Conceitos iniciais
*** Fork
- "Bifurca" um reposit√≥rio existe, bem parecido com o =git clone=, por√©m te permite realizar mudan√ßas e
  criar uma pull request com elas no reposit√≥rio original
*** Pull Request
- Implementa√ß√£o visual do comando =git pull=, onde o dono do reposit√≥rio pode rever as mudan√ßas que outra pessoa fez
  no fork dela e decidir se deve ser mesclado ou n√£o em alguma branch. Principal maneira de se fazer code review
  ou contribuir com algum projeto open source
*** Issue
- Abrir uma issue significa abrir uma discuss√£o em um reposit√≥rio sobre algum assunto. Geralmente √© usada
  para descrever bugs de um programa ou sugerir melhorias/mudan√ßas no c√≥digo fonte
*** Release
- Um dos m√©todos de distribui√ß√£o de um projeto. Geralmente √© aqui onde os desenvolvedores exp√µem os bin√°rios
  (execut√°veis) de suas aplica√ß√µes, junto com um "changelog", indicando as mudan√ßas de cada atualiza√ß√£o
*** Gist
- Pequeno trecho de c√≥digo ou texto
- Seu "nome" geralmente √© um hash grande
** Como interagir com o Github
- Existem algumas maneiras de interagir com o Github:
  1. Pelo site oficial -> https://github.com
  2. Pelo aplicativo em GUI oficial -> https://desktop.github.com/
  3. Pela CLI oficial: https://cli.github.com/

Como estamos numa AARE de linha de comando... Vamos de CLI. Por√©m todas essas a√ß√µes podem ser replicadas pelo site üòä

*** Instalando a github-cli
No nosso cont√™iner estamos usando a distro ~Ubuntu~, que √© baseada no Debian, logo,
precisamos adicionar o reposit√≥rio do github e suas chaves para instalar o software:

#+begin_src bash
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
sudo apt-add-repository https://cli.github.com/packages
sudo apt update
sudo apt install gh
#+end_src

*** Configurando a CLI

Para prosseguir e realizar as listas de exerc√≠cios e o teste final, √© necess√°rio ter a CLI do github devidamente configurada!
Existem 2 passos para atingir esse objetivo:

1. Adicionar uma chave ~SSH~ na sua conta do Github
2. Se autenticar na CLI

O primeiro passo pode ser executado, seguindo o tutorial para Linux, no site oficial do github:
https://docs.github.com/pt/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

J√° o segundo passo, pode ser executado com o comando ~gh auth login~, que √© descrito na pr√≥xima se√ß√£o.

*** Comandos
**** gh auth
***** gh auth login
- Conecta sua conta do github com o dispositivo atual
***** gh auth logout
- Remove sua conta github do diospositivo atual
**** gh repo
***** gh repo create <nome>
- Cria um reposit√≥rio remoto no github
  - Caso seja executado dentro de um reposit√≥rio local (onde foi executado =git init=),
    apenas cria o repo remoto e adiciona uma nova URL como ~origin~
  - Se executado fora de um reposit√≥rio local, perguntar√° se deseja criar um no diret√≥rio atual
***** gh repo clone <username><repo>
- Igual o =git clone=, por√©m menos verboso, sem a necessidade de colocar uma URL
***** gh repo fork
- Cria um fork de um reposit√≥rio no Github
**** gh gist
***** gh gist create <arquivos>
- Cria uma gist com os arquivos especificados
- Retorna o link da gist
***** gh gist delete <gist_id|gist_url>
- Delete a gist especificada
***** gh gist clone <gist> [diretorio]
- Clona uma gist num diret√≥rio especificado ou com o nome original
**** gh pr
***** gh pr create
- Cria uma Pull Request no Github da branch que voc√™ est√° para a master/main
***** gh pr merge <pr>
- Dado um n√∫mero, URL ou nome da branch de uma PR, mescla ela com a branch master/main
***** gh pr diff <pr>
- Dado uma PR, mostra as mudan√ßas propostas por ela
***** gh pr close
- Fecha a Pull Request
***** gh pr comment <pr>
- Dado uma PR, cria um novo coment√°rio

* Refer√™ncias
- Site oficial Git: https://git-scm.com/
- Fonte dos comandos animados: https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#revert
- Visualize os comandos b√°sicos do git: https://onlywei.github.io/explain-git-with-d3/
- Manual da CLI do Github: https://cli.github.com/manual/
- 18 comandos git: https://towardsdatascience.com/git-commands-cheat-sheet-software-developer-54f6aedc1c46
- Aula completa freeCodeCamp sobre git e github: https://www.youtube.com/watch?v=RGOj5yH7evk&list=PL8Vfm2INuMLE5DMqGlHSYC4wnp0Mna-Vl&index=2
- Aula completa sobre desfazer erros comuns: https://www.youtube.com/watch?v=lX9hsdsAeTk&list=PL8Vfm2INuMLE5DMqGlHSYC4wnp0Mna-Vl&index=3
- Post sobre como usr o =git checkrry-pick=: [[https://gitbetter.substack.com/p/how-to-use-git-cherry-pick-effectively]]
