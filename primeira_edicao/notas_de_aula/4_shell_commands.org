#+title: Comandos Shell ou: “Como se perder no terminal?”
#+author: Matheus de Souza Pessanha
#+email: 00119110328@pq.uenf.br

* Onde eu consigo uma ajuda?
Todos os comandos (nativos ou não) possuem uma "man page", ou "página de manual", onde fica toda a documentação do comando.

Para abrir o manual de algum comando, apenas digite no terminal:

#+begin_src bash

$ man <comando>

#+end_src

Exemplos:
~man man~ -> abre o manual do comando ~man~!

Dicas:
- Caso o manual ultrapasse o tamanho do terminal, é possível navegar sobre ele com as setas de direção ou com ~h/j/k/l~
- Para sair da documentação, apenas tecle ~q~
* Como me movimento?
Existem diversas maneiras de se movimentar pelo terminal e isso também depende de qual emulador de terminal você está usando!

Porém, existe alguns atalhos do teclado que de certa forma são universais! Iremos ver cada um deles:

** Movimentação básica
[[../imagens/basic_moves.gif]]

Vamos tentar algumas movimentações básicas:

- Podemos avançar um caractere com =Ctrl-f= ou =Seta pra direita=
- Podemos voltar um caractere com =Ctrl-b= ou =Seta pra esquerda=
- =Alt-f= ou =Ctrl-SetaDireita= para avançar por palavras
- =Alt-b= ou =Ctrl-SetaEsquerda= para voltar por palavras
- =Ctrl-a= ou =Home= para ir para o início da linha
- =Ctrl-e= ou =End= para ir pro final da linha

** Manipulando linhas e caracteres
Escrevam algumas frases no terminal!

Para apagar a partir do cursor até o final da linha, usamos o =Ctrl-k=

Já para apagar do cursor até o começo da linha, usamos o =Ctrl-u=

Agora você pode colocar o que você acabou de cortar com o =Ctrl-y=

Ok, mas se eu quiser copiar/colar a partir da área de transferência?
Simples: geralmente o copiar está mapeado para =Ctril+Shift+c= e o colar para =Ctrl+Shift+v=

E se eu quiser apagar uma palavra inteira? =Alt+d= faz isso, porém, com uma ressalva:
- Ele vai apagar a partir da posição do seu cursor até o final da palavra!
- Para apagar uma palavra inteira, possicione o cursor na primeira letra e então execute o comando

*** Nossa, minha tela está cheia, o que faço?
Fácil! Você pode usar =Ctrl+l= ou o executar o comando ~clear~

* Comandos Básicos
A seguir veremos alguns comandos essenciais para o dia a dia!

Avisos:
- A tecla =RET= significa "Return", que é o "Enter"
- Todos os comandos são executados da seguinte maneira: =<comando> <flags> <entradas> + RET=
- O shell padrão - ~sh~ - é bem simples e limitado; vários atalhos de movimentação não serão reconhecidos

Bem, o contêiner que iremos utilizar vem instalado com quatro shells diferentes:
1. sh (padrão)
2. bash
3. zsh
4. fish

Para iniciar um shell, apenas digite o nome do shell desejado e tecle =RET=.

Caso queriam iniciar sempre em um shell específico, ao iniciar o contêiner, execute:
#+begin_src bash
# copia o CONTAINER ID do cli_intro
docker ps -a

# o "shell" pode ser: sh, bash, zsh ou fish
docker exec -it <id> /bin/<shell>
#+end_src

** Parâmetros de opções
Diversos comandos possuem algumas opções extras que podem ser acionadas com esses parâmetros!
Os nomes originais são "flags", ou "bandeiras".

Eles funcionam da seguinte maneira:
=<comando> -<opção> --<opção>-<longa>=

Exemplos:
Além do comando =man=, também podemos conseguir ajuda para um comando acionando a flag =--help= ou =-h=
=<comando> --help=

** sudo
- Comando para conferir permissões de ~root~ temporariamente ao usuário
- Pode ser lido como "super user, do <comando>"

Usos:
- =sudo rm /etc/fstab= -> remove o arquivo "fstab" da pasta ~/etc~

** exit
- Como sair do shell ou interromper o contêiner?
  Apenas execute o comando =exit= seguido de um =RET=
  Uma alternativa é o atalho =Ctrl-d=

- Caso você só tenha um shell rodando, o contêiner atual será desligado.
** whoami
- Bem, traduzindo de forma direta ~whoami~ significa "quem sou eu?".
- Esse comando serve para imprimir na tela qual o usuário que está logado
** pwd
- "print working directory", ou "imprima o diretório de trabalho (atual)"
- Como o próprio nome diz: mostra em qual diretório você está atualmente!
** ls
- Pode ser lembrado como "list"
- Lista todos os arquivos presentes no atual diretório
- Pode receber um outro diretório como entrada

Possuem alguns parâmetros de opções:
Exemplos:
- =ls -l= -> lista todos os arquivos/diretórios, mostrando também suas permissões
- =ls -a= -> lista todos os arquivos/diretórios, inclusive os arquivos ocultos
** cd
- Pode ser entendido como "change directory"

- Método padrão de navegar entre diretórios
- Recebe uma entrada: o diretório para o qual voc quer ir
- Aceita tanto caminhos absolutos ou caminhos relativos
- Nos shells ~zsh~ e ~fish~, não há necessidade de ser executado
** mkdir
- Traduzindo: "criando um diretório"

Uso:
- =mkdir pasta= -> cria um diretório com o nome "pasta"
- =mkdir 'pasta de exemplo'= -> cria um diretório com o nome "pasta de exemplo"
- =mkdir pasta\ de\ exemplo= -> tem o mesmo efeito que o comando acima
- =mkdir pasta1 pasta2= -> cria duas pastas
- =mkdir -p ./pasta1/pasta2= -> cria a "pasta2" dentro da "pasta1"
** rmdir
- "remove diretório"
- Apenas funciona para diretórios vazios!

Uso:
- =rmdir pasta= -> remove o diretório chamado "pasta"
- =rmdir pasta1 pasta2= -> remove os dois diretórios
- =rmdir -p ./pasta1/pasta2= -> remove todas as pastas e seus "parentes"
- =rmdir *= -> remove todos os diretório do caminho atual
** rm
- "remove" ou "remover", comando para exlucir qualquer coisa

Uso:
- =rm <arquivos>= -> remove todos os arquivos listados, caso seja um diretório, dará erro
- =rm -f= -> força a exclusão do arquivo
- =rm -r= -> remove recursivamente tudo o que existir dentro de um diretório e o próprio junto.
** touch
- Cria um arquivo vazio

Uso:
- =touch <nome>.<extensão>= -> cria um arquivo vazio com o nome e extensão específicados
** echo
- "ecoar"
- Geralmente usamos ele para imprimir algum texto na tela ou redirecionar para um arquivo

Usos:
- =echo <entrada>= -> imprime na tela as entradas
- =echo <entrada> > <arquivo>= -> redireciona a STDOUT do ~echo~ para um arquivo
- =echo <entrada> >> <arquivo>= -> redireciona a STDOUT ~echo~ e adiona o conteúdo no final do arquivo
** cat
- "concatenate" ou "concatenção".
- Pode ser usado para mostrar o conteúdo de um ou vários arquivos!

Uso:
- =cat <arquivos>=
- =cat -n <arquivos>= -> mostra o número de cada linha do arquivo
- =cat -e <arquivos>= -> mostra um ~$~ em todo final de linha
** tac
- Possui a mesma função que o ~cat~, porém imprime as linhas na ordem inversa
** mv
- "move" ou "mover"
- Usado para mover arquivos ou diretórios de um caminho para o outro e também para renomear um arquivo/diretório

Usos:
- =mv <caminho-inicial> <caminho-destino>= -> move algo do "caminh-inicial" para o "caminho-destino"
- =mv pasta1 pasta2= -> renomeia "pasta1" para "pasta2"
** cp
- "copy" ou "copiar"
- Copia arquivos ou diretórios

Uso:
- =cp arquivo1 arquivo2 /home= -> copia os arquivos para a pasta ~/home~
- =cp -r . ..= -> copia o diretório atual, recursivamente para o diretório acima (parente)
** head
- "cabeça"
- Imprime na tela as primeiras partes de um arquivo!

Usos:
- =head <arquivo1> <arquivo2>= -> imprime as dez primerias linhas do "arquivo1" e "arquivo2" para a STDOUT
- =head -n 15 <arquivo>= -> imprime as quinze primeiras linhas de um arquivo
** tail
- "cauda"
- Imprime as últimas partes de um arquivo

Usos:
- =tail <arquivo1>= -> imprime as últimas dez linhas do "arquivo1"
- =tail -n 15 <arquivo1>= -> imprime as últimas quinze linhas do "arquivo1"
** sort
- "ordernação"
- Ordenar o conteúdo de um conjunto de linhas

Usos:
- =sort < arquivo.txt= -> orderna todas as linhas do arquivo
- Pode receber "Here Documents" também
  #+begin_src bash
  sort << EOF
  4
  3
  2
  1
  EOF
  #+end_src
** wc
- "word count", "contador de palavras"

Usos:
- =wc -n arquivo.txt= -> conta quantas palavras existem no arquivo
- =wc -l arquivo.txt= -> conta quantas quebras de linhas (~\n~) existem no arquivo
** uniq
- "único"
- retorna apenas uma ocorrência de itens repetidos

Usos:
- =uniq < arquivo.txt= -> remove todas as linhas duplicadas do arquivo
- Também aceita "Here Documents"
  #+begin_src bash
  uniq << EOF
  1
  1
  2
  2
  3
  3
  EOF
  #+end_src
* Comandos intermediários
** which
- Imprime o caminho para o executável do programa!

Usos:
- =which ls= -> mostra o caminho para o binário de ~ls~, nesse caso ~/usr/bin/ls~
** whereis
- Parecido com o ~which~, porém mostra todas as ocorrências relacionadas à um programa

Usos:
- =whereis ls= -> imprime todos os caminhos que possuem arquivos/binários relacionados ao programa ~ls~
** chmod
- Modifica as permissões de um arquivo ou diretório

Usos:
- =chmod +x *.sh= -> concede permissão de execução para todos os arquivos com a extensão ~.sh~, para o criador
  do arquivo, para o grupo o qual ele pertence e para todos os outros usuários
- =chmod g+rw *.txt= -> concede permissão de leitura e escrita para o grupo o qual o criador do arquivo pertence
- =chmod o-rw *.txt= -> remove as permissões de leitura e escrita de todos os demais usuários
** chown
- Modifica o detentor (criador) do arquivo e seu grupo

Usos:
- =chown <usuário>:<grupo> <arquivo>= -> transfere a propriedade do um arquivo para um usuário e um grupo
- =chown <usuário> -R <diretórios>= -> transfere a propriedade de um diretórios e todos seu conteúdo para um usuário
** top
- Veja quais processos estão sendo executados no sistema operacional

Uso: =top=
** ps
- Imprime na tela um resumo dos processos rodando

Uso: =ps=
** kill
- "mate"
- Para um processo dado um ~PID~

Usos:
- =kill 1343= -> para ou "mata" o processo com número "1343"
** killall
- "mate todos"
- Dado um programa, o sistema operacional irá parar todos os processos relacionados com esse programa

Usos:
- =killall picom= -> para todos os processos, ou "mata" o programa "picom"
** ping
- Comando para testar se existe conexão em um DNS/IP

Usos:
- =ping 8.8.8.8= -> "pinga", ou testa a conexão com o DNS do Google
** telnet
- Comando para interagir com o protocolo de rede "telnet"
- Pode ser usado para verificar se uma porta está recebendo conexão (está aberta)

Usos:
- =telnet 8.8.8.8 443= -> verifica se a porta ~443~ no DNS ~8.8.8.8~ está aberta
** curl
- "Transfer a URL"
- Transfere dados de uma URL, dado um protocolo de rede

Usos:
- =curl https://www.google.com= -> retorna a página ~HTML~ do Google
- =curl -H <header> <url>= -> faz uma requisição ~GET~ para a URL
- =curl -X POST -d <body> <url>= -> faz uma requisição ~POST~ com corpo para a url
** wget
- Um utilitário não interativo para baixar arquivos

Usos:
- =wget <url>= -> baixa o arquivo da URL e salva com o nome original
- =wget <url> > arquivo= -> baixa o arquivo e salva com o nome "arquivo"
** less
- Uma evolução do comando ~more~

Assim como o ~cat~ ele redireciona o conteúdo do arquivo para a STDOUT, porém,
se o arquivo for longo, ele cria um ambiente no qual é possível navegar desde
do começo do arquivo, usando as setas de direção.
** passwd
 - Comando para trocar a senha de um usuário. É executado apenas em modo interativo

Usos:
- =passwd= -> abre o prompt interativo para a troca de senha do usuário atual
- =passwd <usuário>= -> abre o prompt interativo para a troca de senha do usuário especificado
** chpasswd
- Outro comando para trocar a senha de um usuário, entretanto, não requer mode interativo
- Pode receber a senha e o usuário a partir da STDIN
- Boa opção para ser usada em contêineres ou para modificar diversos usuários ao mesmo tempo

Usos:
- =<usuário>:<senha> | chpasswd= -> troca a senha do "usuário" para "senha"
** usermod
- Modifica um usuário
- Pode ser usado para remover ou adicionar usuários à grupos

Usos:
- =sudo usermod -aG docker <usuário>= -> ~-a~ significa "append", ou "adicionar à" e ~-G~ significa a quais grupos.
Logo, esse comando adiciona o "usuário" ao grupo "docker"
** free
- Mostra o atual consumo de RAM

Usos:
- =free= -> imprime o uso da memória RAM
- =free -h= -> mostra de forma human-readable (humanamente legível) o consumo de RAM
** grep
- Procura por padrões em arquivos
- Aceita expressões regulares como entrada (Perl ou EERs)

Usos:
- =grep nix <arquivo>= -> procura pela ocorrência da palavra ~nix~ no arquivo
- =grep -n nix <arquivo>= -> além de realizar a busca, mostra o número da linha na qual exista o padrão
- =grep -i nix <arquivo>= -> versão "case-insensitive", ou seja, não diferencia letras maiúsculas das minúsculas

Como o grep suport expressões regulares, podemos ustilizar dessa forma:
- =grep x$ <arquivo>= -> procura por toda a ocorrência de "x" no final de uma palavra no arquivo
- =grep ^x <arquivo>= -> procura por palavras que começam com "x"
- =grep ^x.r$ <arquivo>= -> procura por apavras que começam com "x", tenham qualquer carectere na segunda posição e termine com "r"
** find
- Comando de busca geral
- Possui diversas "flags"

Uso geral: =find <diretório> <flags>=

Usos:
- =find . -name <nome>= -> procura no diretório atual, todos os arquivos/pastas com o nome especificado
- =find . -type d= -> procura por todos os arquivos no diretório atual que também sejam diretórios
- =find . -size <size>= -> procura por aquivos que tenham o tamnho especificado
- =find . -perm 777= -> procura por arquivos que possuam a permissão ~777~
- =find . -user <usuário>= -> procura por todos os arquivos pertencentes ao "usuário"
** su
- "substitute user", ou "substituir usuário"
- Comando para trocar de usuário pelo terminal

Usos:
- =su <usuário>= -> loga no usuário especificado
- =su -= -> atalho para logar na conta ~root~
** apt
- Gerenciador de pacotes de distros baseadas na distro Debian
- Geralmente necessita de privilégios de usuário ~root~
- "Advanced Package Tool", ou "Ferramenta de pacotes avançada"

Anteas de vermos os comandos:
1. o que é um repositório?
   - Um lugar (geralmente na internet), onde informção é guardada
2. o que é um pacote?
   - No mundo Linux, chamamos os programas que queremos instalar de "pacotes"
3. o que são dependências?
   - São pacotesd essenciais para que um outro pacote funcione corretamente

Exemplos:
- repositórios do ~github~, para guardar projetos e arquivos com o ~git~
- repositórios de distros Linux -> onde as comunidades/empresas que mantém a distro podem
disponibilizar os prgramas a serem instalados

*** atualizar
- =sudo apt update= -> atualiza a lista de repositórios
- =sudo apt upgrade= -> atualiza todo o sistema operacional
- =sudo apt full-upgrade= -> atualiza todo o sistema operacional e remove os pacotes não utilizados

*** informações
- =apt show <pacote>= -> informações detalhadas sobre o pacote
*** listagem
- =apt list= -> lista todos os pacotes instalados
- =apt list --upgradable= -> lista apenas os pacotes que possuem atualizações

*** pesquisas
- =apt search <name>= -> procura nos repositórios se o pacote existe

*** instalar
- =sudo apt install <pacote>= -> instala o pacote de forma interativa
- =sudo apt install -y <pacote>= -> instala o pacote de forma direta
*** desinstalar
- =sudo apt remove <pacote>= -> desinstala o pacote especificado, porém não remove as dependências
- =sudo apt autoremove= -> remove as dependências e pacotes que não são utilizados
** apt-cache
- Extensão do ~apt~
- Mostra as dependências opcionais e obrigatórias de um pacote

Usos:
- =apt-cache depends vim= -> mostra as dependências do pacote "vim"
** dpkg
- Utilitário para instalar pacotes ~.deb~

*** instalar
- =sudo dpkg -i <arquivo>.deb= -> instala o pacote ~.deb~ especificado
*** remover
- =sudo dpkg -r <pacote>= ->remove um pacote instalado via ~dpkg~
*** remover dependências
- =sudo dpkg -p <pacote>= -> remove todas as dependências de um pacote

* Referências
- Comandos básicos, Diolinux: https://www.youtube.com/watch?v=JEhVB4VHsTI&list=PLZsjaJhVZaxX9xCXhZDJnhFcIL4ncLjVj&index=6
- Tutorial básico, CanalTech: https://canaltech.com.br/linux/10-comandos-essenciais-do-linux/
- 35 comandos Linux, Hostinger: https://www.hostinger.com.br/tutoriais/comandos-linux#Comandos-Linux
- Comandos importantes, DevMedia: https://www.devmedia.com.br/comandos-importantes-linux/23893
